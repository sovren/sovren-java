# This workflow will create javadocs and deploy to GitHub pages

name: publish-javadocs

on:
  pull_request:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
  workflow_dispatch: #add this option for testing

jobs:
  publish-javadocs:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 10
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    # extract the PR source branch name from the env variable where we can use it later
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_HEAD_REF#refs/heads/})"
      id: extract_branch
    - name: Get last commit message
      shell: bash
      #run: echo "##[set-output name=commitMsg;]$(git log ${{ steps.extract_branch.outputs.branch }} -1 --pretty=format:'%s')"
      run: echo "##[set-output name=commitMsg;]$(git log --format=%B -n 1 HEAD^2)"
      id: extract_message
    - name: Set CI commit message
      shell: bash
      run: echo "##[set-output name=autoCommitMsg;]$(echo '--- auto-generation of javadocs ---')"
      id: set_message
    # - name : GITHUB CONTEXT
    #   env:
    #     GITHUB_CONTEXT: ${{ toJson(github.event) }}
    #   run: echo "$GITHUB_CONTEXT"
    - name: log1
      run: echo "${{ steps.extract_message.outputs.commitMsg }}"
    - name: log2
      run: echo "${{ steps.set_message.outputs.autoCommitMsg }}"
    # generate the javadocs into the target/site/apidocs folder (default)
    - name: Generate javadocs with Maven
      if: ${{ !contains(steps.extract_message.outputs.commitMsg, steps.set_message.outputs.autoCommitMsg) }}
      run: mvn javadoc:javadoc
    # publish the generated javadocs into the /docs folder on a new commit in this branch
    - name: Publish javadocs to GitHub Pages
      if: false #${{ !contains(steps.extract_message.outputs.commitMsg, steps.set_message.outputs.autoCommitMsg) }}
      uses: JamesIves/github-pages-deploy-action@4.1.4
      with:
        branch: ${{ steps.extract_branch.outputs.branch }}
        folder: target/site/apidocs
        target-folder: docs
        git-config-name: Continuous Integration
        git-config-email: devs@sovren.com
        commit-message: ${{ steps.set_message.outputs.autoCommitMsg }}
        token: ${{ secrets.JAVADOCS_CI_TOKEN }}
